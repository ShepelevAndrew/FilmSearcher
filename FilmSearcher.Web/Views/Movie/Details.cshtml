@model MovieViewModel

@{
    ViewData["Title"] = "Movie";
}

<div class="container">
    <div class="film-info">
        <div>
            <img style="width: 300px; margin-top: 20px" src="@Model.Movie.ImageURL" />
        </div>
        <div class="container-info">
            <div>
                <span>@Model.Movie.Name</span>
            </div>
            <div>
                <label>Category:</label>
                <span>@Model.Movie.Category</span>
            </div>
            <div>
                <label>Start:</label>
                <span>@Model.Movie.StartDate</span>
            </div>
            <div>
                <label>End:</label>
                <span>@Model.Movie.EndDate</span>
            </div>
            <div>
                <label>Producer:</label>
                <span>@Model.Movie.ProducerId</span>
            </div>
            <div>
                <label>Actors:</label>
                <ul class="actors-block">
                    @foreach (var actor in @Model.ActorsData) {
                        <li>
                            <div class="actors-add-info">
                                <img src="@actor.ProfilePictureURL" height="70px">
                                <span>@actor.FullName</span>
                            </div>
                            <a asp-controller="Actor" asp-action="Details" asp-route-id="@actor.ActorId">@actor.FullName</a>
                        </li>
                    }
                </ul>
            </div>
            <div>
                <label>Cinema:</label>
                <span>@Model.Movie.CinemaId</span>
            </div>
            <div>
                <label>Description:</label>
                <p>@Model.Movie.Description</p>
            </div>
        </div>
    </div>

    <div class="score">
        <div class="score-container">

        </div>
        <div class="score-of-film">
            <span>@Model.MovieUser.MovieScore</span>
        </div>
    </div>
</div>

<style>
    a {
        text-decoration: none;
        color: black;
    }

    a:hover {
        color: black;
    }

    .film-info {
        display: flex;
        justify-content: center;
    }

    .score {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .score-container {
        display: flex;
        text-align: center;
    }

    .score-img-container:last-child {
        padding-right: 0;
    }
    .score-img-container {
        padding-right: 10px;
    }

    .score-img-container:hover {
        cursor: pointer;
    }
    .score-counter {
        color: #CCC;
    }

    .container-info {
        width: 55vw;
        margin-left: 20px;
        display: grid;
        row-gap: 10px;
    }

    .container-buttons {
        display: flex;
    }

    .container-buttons a {
        margin-left: 10px;
    }

    .button {
        width: 80px;
        height: 40px;
        background: #999999;
        border-radius: 5px;
        text-align: center;
        padding-top: 7px;
        font-weight: 600;
    }

    .update {
        border: 0px;
        padding-bottom: 7px;
    }

    .update:hover {
        color: white;
        background: #198754;
        transition: .3s;
    }

    .delete:hover {
        color: white;
        background: #dc3545;
        transition: .3s;
    }

    .actors-block {
        display: flex;
        margin: 5px 0px;
        padding-left: 20px;
        grid-column-gap: 10px;
        position: relative;
    }

    .actors-block li {
        list-style-type: none
    }

    .actors-block li::after {
        content: ',';
    }

    .actors-block li:last-child::after {
        content: '.';
    }

    .actors-add-info {
        top: -70px;
        position: absolute;
        transition: .2s;
        visibility: hidden;
        opacity: 0;
        display: flex;
        align-items: center;
        background: white;
    }

    .actors-block li:hover .actors-add-info {
        visibility: visible;
        opacity: 1;
    }
</style>

<script>
    const score = document.querySelector('.score-of-film').textContent
    let container = document.querySelector('.score-container')
    let html = `
                 <div class="score-img-container" id="dataid">
                     <img src="../../img/icon/star-grey-score.png" width="32px"/>
                     <div class="score-counter"><p>dataid</p></div>
                 </div>
                 `
    
    for(let i = 0; i < 10; i++) {
        container.innerHTML += html.replaceAll('dataid', (i + 1).toString())
    }

    document.querySelectorAll('.score-img-container').forEach(item => {
        item.addEventListener('mouseover', (e) => {
            const id = +item.id

            document.querySelectorAll('.score-img-container').forEach(item => {
                if(item.id - 1 < id) {
                    item.querySelector('img').src = '../../img/icon/star-fill-score.png'
                    item.querySelector('.score-counter').style.color = '#FFC107'
                }
            })
        })

        document.querySelector('.score-container').addEventListener('mouseout', (e) => {
            document.querySelectorAll('.score-img-container').forEach(item => {
                item.querySelector('img').src = '../../img/icon/star-grey-score.png'
                item.querySelector('.score-counter').style.color = '#CCC'
            })
        })

        item.addEventListener('click', (e) => {
            const score = +item.id

            console.log(score)
            addScore(score)
        })
    })

    const addScore = (score) => {
        let url = window.location.href
        const movieId = url.substring(url.lastIndexOf('/') + 1)

        url = '/Movie/Score?id=' + movieId + '&score=' + score

        fetch(url, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
        }).then(function (res) {
            console.log(res)
        })
    }
</script>